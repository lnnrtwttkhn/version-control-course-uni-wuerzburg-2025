---
title: "Session 8: Summary & Outlook"
date: 2025-10-09T16:00:00
format: revealjs
metadata-files:
  - _slides.yml
quiz-url: https://version-control-feedback.formr.org/
---

# Summary

## How are you now?

::: fragment
![](../images/moodscale_14.jpeg){width="50%"}
:::

## Schedule

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
create_schedule()
```

## Learning Objectives

### Introduction to Version Control

{{< include ../objectives/_objectives-intro.qmd >}}

### Basics of the Command Line

{{< include ../objectives/_objectives-cli.qmd >}}

### Setup

{{< include ../objectives/_objectives-setup.qmd >}}

## Learning Objectives (continued)

### First steps with Git

{{< include ../objectives/_objectives-firststeps.qmd >}}

### Git Essentials

{{< include ../objectives/_objectives-essentials.qmd >}}

### Branches

{{< include ../objectives/_objectives-branches.qmd >}}

## Learning Objectives (continued)

### Integration with GitHub / GitLab

{{< include ../objectives/_objectives-remotes-intro.qmd >}}

### Collaboration on GitHub / GitLab

{{< include ../objectives/_objectives-github-advanced.qmd >}}

## Quizzes {visibility="hidden"}

Test your Git knowledge with **quizzes** (also after the course):

- **Introduction**: [{{< var quizzes.intro >}}]({{< var quizzes.intro >}})
- **Command Line**: [{{< var quizzes.cli >}}]({{< var quizzes.cli >}})
- **Git Basics**: [{{< var quizzes.basics >}}]({{< var quizzes.basics >}})
- **Branches**: [{{< var quizzes.branches >}}]({{< var quizzes.branches >}})
- **GitHub**: [{{< var quizzes.github >}}]({{< var quizzes.github >}})

Feel free to **enter your personal and course codeword**!

# There's more ...

## Rewriting history

See chapter ["Rewriting History"](https://lennartwittkuhn.com/version-control-book/chapters/rewriting-history.html)

![Credit: [tech_kody](https://www.tiktok.com/@tech_kody) via TikTok](../images/git-revert-meme.png){width="30%"}

## Tags, releases, DOIs: Integration with Zenodo

::: fragment
::: columns
::: {.column width="75%"}
> "*Zenodo, a CERN service, is an open dependable home for the long-tail of science, enabling researchers to share and preserve any research outputs in any size, any format and from any science.*" -- from the [Zenodo GitHub README](https://github.com/zenodo/zenodo)
:::

::: {.column width="25%"}
![[Zenodo Logo (CC0 license)](https://about.zenodo.org/)](https://about.zenodo.org/static/img/logos/zenodo-gradient-round.svg){height="20%" fig-align="left"}
:::
:::
:::

::: fragment
#### Integrate your repository on GitHub with Zenodo

> "*To **make your repositories easier to reference in academic literature**, you can create persistent identifiers, also known as Digital Object Identifiers (DOIs). You can use the data archiving tool [Zenodo](https://zenodo.org/) to archive a repository on [GitHub.com](https://github.com/) and issue a DOI for the archive.*" -- Details in the [GitHub documentation](https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content)
:::

::: fragment
::: columns
::: {.column width="45%"}
1.  Navigate to the [login page](https://zenodo.org/login) for Zenodo.
2.  Click **Log in with GitHub**.
3.  Review the information about access permissions, then click **Authorize zenodo**.
4.  Navigate to the [Zenodo GitHub page](https://zenodo.org/account/settings/github/).
5.  To the right of the name of the repository you want to archive, toggle the button to **On**.

See our book chapter on ["Tags & Releases"](https://lennartwittkuhn.com/version-control-book/chapters/tags-and-releases.html).
:::

::: {.column width="55%"}
![["Making your project citable" by CodeRefinery (CC BY 4.0)](https://coderefinery.github.io/github-without-command-line/doi/)](https://coderefinery.github.io/github-without-command-line/_images/zenodo.png){fig-align="left"}
:::
:::
:::

::: notes
-   CERN, the European Organization for Nuclear Research, is one of the world's largest and most respected centres for scientific research.
:::

::: notes
-   Demonstration: We are now going to add a DOI to this presentation.
:::

## Graphical User Interfaces (GUIs) for Git

::: columns
::: {.column width="35%"}
::: fragment
### Integrated Development Environments (IDEs)

#### RStudio

[![](../images/gui-rstudio.png)](https://microsite.geo.uzh.ch/reproducible_research/post/rr-rstudio-git/)
:::

::: fragment
#### MATLAB

[![](../images/gui-matlab.png)](https://de.mathworks.com/help/matlab/matlab_prog/branch-and-merge-with-git.html)
:::
:::

::: {.column width="35%"}
::: fragment
### Git Clients

### GitKraken

[![](../images/gui-gitkraken.png)](https://jonbunator.github.io/gitkraken-custom-themes/)
:::

::: fragment
### GitHub Desktop

[![](../images/gui-githubdesktop.png)](https://desktop.github.com/)
:::
:::

::: {.column width="25%"}
::: fragment
### Mobile

#### Working Copy (iOS)

[![](../images/gui-workingcopy.png)](https://workingcopyapp.com/users-guide)
:::
:::
:::

## Continuous Integration & Deployment (CI/CD)

::::: columns
:::: {.column width="65%"}
![from [Suresoft](https://suresoft.dev/knowledge-hub/continuous-integration/gitlab-ci/)](../images/gitlab-ci.jpg)
::::
:::: {.column width="35%"}
#### Example: Lennart's `recipes` repo

- Automated spell check
- Rebuilding of project website

{{< fa display >}} [{{< var course.project-site >}}]({{< var course.project-site >}})
::::
:::::

## Version Control for *data*: DataLad

::::: columns
:::: {.column width="55%"}
::: fragment
... for **data** (binary files) ![© Jorge Cham (phdcomics.com)](http://phdcomics.com/comics/archive/phd052810s.gif)
:::
::::
:::: {.column width="45%"}
::: {.fragment}
Sadly, Git does not handle large files well.
![](../images/git-snapshot.png){fig-align="center" width=100%}
:::
::: {.fragment}
::: {layout-ncol=2}
![[datalad.org](https://www.datalad.org/) (from the [DataLad Handbook](https://handbook.datalad.org/en/latest/index.html) by Wagner et al.)](../images/datalad-logo-full.svg)

[![](../images/datalad-handbook-logo.svg)](https://handbook.datalad.org/en/latest/)
:::
:::
::::
:::::

# Discussion

## Navigating towards open and reproducible research

{{< include tasks/tasks-outlook.qmd >}}

## Science as distributed open-source *knowledge* development ^[inspired by [Richard McElreath](https://www.eva.mpg.de/ecology/staff/richard-mcelreath/)'s ["Science as Amateur Software Development"](https://www.youtube.com/watch?v=8qzVV7eEiaI) (2023)]

::::: {.columns}
:::: {.column width="45%"}
::: {.fragment fragment-index=1}
#### How can we do better science?
![](../images/version-control-workflow.png)
:::
::: {.fragment fragment-index=3}
#### The long-term challenges are non-technical
- open-source, avoiding commercial vendor lock-in
- adopting new practices and upgrading workflows
- moving towards a "culture of reproducibility" ^[see ["Towards a culture of computational reproducibility"](https://mediasite.video.ufl.edu/Mediasite/Play/b26b123b082e4adba367b8f2b91ce34a1d) by Russ Poldrack, Stanford University]
- changing incentives, policies & funding schemes
:::
::::
:::: {.column width="55%"}
::: {.fragment fragment-index=2}
#### Technical solutions already exist!
- **Version control** of digital research outputs (e.g., [Git](https://gitlab.com/), [DataLad](https://www.datalad.org/))
- Integration with **flexible infrastructure** (e.g., [GitLab](https://gitlab.com/))
- Systematic **contributions** & review (e.g., [pull](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)/[merge](https://docs.gitlab.com/ee/user/project/merge_requests/) requests)
- **Automated integration** & deployment (e.g., [CI/CD](https://about.gitlab.com/topics/ci-cd/))
- Reproducible **computational environments** (e.g., [Docker](https://www.docker.com/))
- Transparent **execution** and **build** systems (e.g., [GNU Make](https://www.gnu.org/software/make/))
- Project **communication next to code & data** (e.g., [Issues](https://github.com/features/issues))
:::
::: {.fragment fragment-index=4}
![Source: ["Strategy for Cultural Change"](https://www.cos.io/blog/strategy-for-culture-change) (2019) by the [Center for Open Science](https://www.cos.io/)](../images/cos-pyramid-cultural-change.png){width=80%}
:::
::::
:::::

::: {.notes}
- In science, we try to generate knowledge about the world
- For the sake of insight or explanation but also to perform evidence-based interventions
- Problem: We need to integrate our work with the work of other people into a common body of knowledge
- Process of continuous integration
- It's fair to say that the way that this is done in science is fairly chaotic
- Other disciplines with a analogous problem have professionalized the process of continuous integration
- primary analogy: software development
- why? a lot of contemporary science involves digital research data and involves software development (or code) to analyze these data (or perhaps disciplines could really benefit from this)
- this might be shocking to some (you want to study the brain but now you need to code) but this is the way it is
- software development is a standard part of being a scientist
- we have to understand the tools that we use to do our job
- software development has a lot of tools that allow to handle continuous integration professionally
- **distributed** and **asynchronous** work in large, international teams
- main work includes working with **data** using **code**
- when you train as a software developer, you learn a common stack of tools
- Testing: writing code to test if code works
:::

## Reproducibility is a spectrum and a journey

::::: {.columns}
:::: {.column width="50%"}
::: {.fragment}

![["Reproducibility Scale"](https://berd-nfdi.github.io/BERD-reproducible-research-course/) by [Heidi Seibold and Rabea Müller and The Digital Research Academy Community and The BERD Academy](https://www.berd-nfdi.de/berd-academy/) (License: [CC BY
4.0]({{< var links.ccby40 >}}))](../images/repro-scale.jpg)
:::
::::
:::: {.column width="50%"}
::: {.fragment}
![by [Scriberia]({{< var links.scriberia >}}) for @turingway2022 ([Link](https://zenodo.org/record/3678226/), [CC BY
4.0]({{< var links.ccby40 >}}))](../images/reproducible-journey.jpg)
:::
::::
:::::

# Feedback

## Feedback

- Please complete the feedback survey: [{{< meta quiz-url >}}]({{< meta quiz-url >}})
- This should not take much longer than **15 minutes**.

# Questions?

## References

:::{#refs}
:::
