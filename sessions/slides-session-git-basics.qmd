---
title: "Session 4: {{< meta session-title >}}"
date: 2025-10-30T10:30:00
format: revealjs
metadata-files:
  - _slides.yml
session-title: "First steps with Git & Git Essentials"
chapter: |
  ["First steps with Git"](https://lennartwittkuhn.com/version-control-book/chapters/first-steps-git.html) and ["Git Essentials"](https://lennartwittkuhn.com/version-control-book/chapters/git-essentials.html)
---

# Last session

## Last session: Basics of the command line & Git setup

![Source: [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Linux_command-line._Bash._GNOME_Terminal._screenshot.png) (free license)](../images/command-line.png)

## Last session: Learning objectives

After the last session, you should now be able to answer the following questions / do the following:

::: {.fragment}

### Command line

{{< include ../objectives/_objectives-cli.qmd >}}

:::

::: {.fragment}

### Setup

{{< include ../objectives/_objectives-setup.qmd >}}

:::

## Last session: Command line cheatsheet

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
knitr::kable(table_cheatsheet(name = "cli"), format = "markdown", row.names = FALSE)
```

## Last session: Git setup cheatsheet

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
knitr::kable(table_cheatsheet(name = "config"), format = "markdown", row.names = FALSE)
```

## Last session: `{{< var course.project >}}` project

::: {.fragment}

### Command line

{{< include project/project-cli.qmd >}}

:::

::: {.fragment}

### Setup

{{< include project/project-setup.qmd >}}

:::

## Common questions from last session

::: fragment
#### {{< fa circle-question >}} *"How can I enable copy-paste in Git Bash?"*

1.    Click on the Git Bash icon in the top-left corner.
1.    Choose **Options**.
1.    Go to **Keys menu**.
1.    Enable Copy and Paste (Ctrl/Shift + Ins) option.
1.    Click **Apply and Save**.
:::

::: fragment
#### {{< fa circle-question >}} *"How do I find the `Users` folder on Windows?"*
- Use `~`
- If `pwd` is at `/:` you can still use `cd C:`
:::

::: fragment
#### {{< fa circle-question >}} *"The command line does not give feedback!"*
- Yes, I know, I'm sorry ...
- You need to check explicitly if the command had the desired effect.
- Example: After `mkdir {{< var course.project >}}`, use `ls` to check if the `/{{< var course.project >}}` folder was created.
:::

# This session: {{< meta session-title >}}

## Learning objectives

::: {.fragment}

### First steps with Git

{{< include ../objectives/_objectives-firststeps.qmd >}}

:::

::: {.fragment}

### Git Essentials

{{< include ../objectives/_objectives-essentials.qmd >}}

:::

## Reading

{{< fa display >}} {{< meta chapter >}}

```{=html}
<iframe width="100%" height="80%" src="https://lennartwittkuhn.com/version-control-book/chapters/setup.html" title="Version Control Book"></iframe>
```

## Tasks

{{< include tasks/tasks-template.qmd >}}

## `{{< var course.project >}}` project

### First steps with Git

{{< include project/project-basics.qmd >}}

## `{{< var course.project >}}` project

### Git Essentials

{{< include project/project-essentials.qmd >}}

## Cheatsheet

### First steps with Git

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
knitr::kable(table_cheatsheet(name = "basic"), format = "markdown", row.names = FALSE)
```

### Git essentials

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
knitr::kable(table_cheatsheet(name = "essentials"), format = "markdown", row.names = FALSE)
```

## Exercises: First steps with Git

::: {.fragment}
Note: There are several terms in these instructions that might be unfamiliar to you, such as "repository", "stage", or "commit."
Don't worry - you will learn about these terms during this session.
:::

::: {.fragment}
{{< include ../exercises/_exercises-first-steps-git.qmd >}}
:::

## Exercises: Git Essentials

### Amend a commit

{{< include ../exercises/_exercises-essentials-amend.qmd >}}

### Create a `.gitignore` file

{{< include ../exercises/_exercises-essentials-gitignore.qmd >}}

## Important notes

::: fragment
#### {{< fa circle-exclamation >}} Make sure that there is no Git repository in your home directory!
- Your home directory is at `/Users/yourname` (macOS) or `C:\Users\yourname` (Windows).
- There should be no `.git` folder in your home directory (check with `ls -a`; see previous slide).
- If you find a `.git` folder in your home directory, **don't do anything and talk to us first!**
- We want to make sure that you don't accidentally track files in Git that you don't want to track.
:::

::: fragment
#### {{< fa circle-exclamation >}} After you open a fresh terminal, you always need to navigate to your repository first!
- Yes, I know, I'm sorry ...
- Use `pwd` to check your current location and `cd` to move to another directory.
:::

::: fragment
#### {{< fa circle-exclamation >}} Use a Git `user.name` and `user.email` that you are comfortable with
- We will eventually practice to share Git repositories publicly on GitHub.
- Your `user.name` and `user.email` will be part of your commit history.
- A public repository will therefore reveal your `user.name` and `user.email`.
:::

{{< include _git-home-directory.qmd >}}

## Solutions: Setup

```{zsh, filename="Code"}
#| eval: false
#| file: exercises/code-exercises-setup-recipes.sh
```
{{< include ../exercises/_solutions-setup.qmd >}}

## Solutions: First steps with Git

```{zsh, filename="Code"}
#| eval: false
#| file: exercises/code-exercises-first-steps-git-recipes.sh
```
{{< include ../exercises/_solutions-first-steps-git-recipes.qmd >}}

## Solutions: Amend a commit

```{zsh, filename="Code"}
#| eval: false
#| file: exercises/code-exercises-essentials-amend-recipes.sh
```
{{< include ../exercises/_solutions-essentials-amend.qmd >}}

## Solutions: Create a `.gitignore` file

```{zsh, filename="Code"}
#| eval: false
#| file: exercises/code-exercises-essentials-gitignore-recipes.sh
```
{{< include ../exercises/_solutions-essentials-gitignore.qmd >}}

# Appendix

## Staging and Committing

::: columns
::: {.column width="50%"}
### Staging:

-   Command: `git add`
-   Purpose: Preparing and organizing files before they are recorded in the repository's history.
:::

::: {.column width="50%"}
### Committing:

-   Command: `git commit -m "commit message"`
-   Purpose: Saving the changes in the staged files to the repository's history, creating a snapshot.
:::
:::

::: columns
::: {.column width="50%"}
::: fragment
![Source: [git-scm.com](https://git-scm.com/book/en/v2)](../images/git-staging-diagram.png){width="100%"}
:::
:::
::: {.column width="50%"}
::: fragment
![Source: [Heidi Seibold](https://docs.google.com/presentation/d/1Yj59XAAJZQprO-kfDHzHMtjJDttMFAqkkslqcSIRZKg/edit#slide=id.p)](../images/git-analogy-letter.png){width="100%"}
:::
:::
:::

## Saving command line history?

Use this:

```{zsh}
history > history.txt
```

{{< fa display >}} [https://lennartwittkuhn.com/version-control-book/chapters/command-line.html#saving-command-line-history](https://lennartwittkuhn.com/version-control-book/chapters/command-line.html#saving-command-line-history)

```{=html}
<iframe width="100%" height="70%" src="https://lennartwittkuhn.com/version-control-book/chapters/command-line.html#saving-command-line-history" title="Version Control Book"></iframe>
```

## Commit `.gitignore`?

Yes, commit your project-specific `.gitignore` file.

{{< fa display >}} [https://lennartwittkuhn.com/version-control-book/chapters/first-steps-git.html#ignoring-files-and-folders-.gitignore](https://lennartwittkuhn.com/version-control-book/chapters/first-steps-git.html#ignoring-files-and-folders-.gitignore)

```{=html}
<iframe width="100%" height="70%" src="https://lennartwittkuhn.com/version-control-book/chapters/first-steps-git.html#ignoring-files-and-folders-.gitignore" title="Version Control Book"></iframe>
```

## Best practices for commit messages

::: fragment
![](../images/xkcd-git-commit.png)
:::

::: fragment
- Try to keep commit messages **short** (less than 72 characters)
- Use **present tense** and start with an **imperative** verb to indicate the purpose of the commit, for example "add", "fix", "improve" (as if you are giving orders to the codebase to change its behavior)

> If applied, this commit will ... [*your commit message*]

- Try to describe **why** a change is being made
- Link specific [issues](https://lennartwittkuhn.com/version-control-book/chapters/issues.html) that are addressed by your commit
- Use the **description** for more explanation and context
:::
